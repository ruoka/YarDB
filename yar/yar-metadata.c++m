export module yar:metadata;
import std;
import xson;

using namespace std::string_literals;

export namespace db
{

using object = xson::object;

struct metadata
{
    enum action : char {created = 'C', updated = 'U', deleted = 'D'};
    metadata(action s = created) : status{s}
    {};
    metadata(const std::string& c) : metadata{created}
    {
        collection = c;
    };
    action status = created;
    std::string collection = ""s;
    std::chrono::system_clock::time_point timestamp = std::chrono::system_clock::time_point{};
    std::streamoff position = -1;
    std::streamoff previous = -1;
};

const auto updated = metadata{metadata::updated};

const auto deleted = metadata{metadata::deleted};

inline auto& operator << (std::ostream& os, metadata& data)
{
    data.timestamp = std::chrono::system_clock::now();
    data.previous = data.position;
    data.position = os.tellp();
    xson::fast::encode(os,data.status);
    xson::fast::encode(os,data.collection);
    xson::fast::encode(os,data.timestamp);
    xson::fast::encode(os,data.position);
    xson::fast::encode(os,data.previous);
    return os;
}

inline auto& operator << (std::ostream& os, const metadata& data)
{
    xson::fast::encode(os,data.status);
    return os;
}

inline auto& operator >> (std::istream& is, metadata& data)
{
    xson::fast::decode(is,data.status);
    xson::fast::decode(is,data.collection);
    xson::fast::decode(is,data.timestamp);
    xson::fast::decode(is,data.position);
    xson::fast::decode(is,data.previous);
    return is;
}

inline auto to_string(metadata::action a)
{
    if(a == metadata::created) return "created"s;
    if(a == metadata::updated) return "updated"s;
    if(a == metadata::deleted) return "deleted"s;
    std::terminate();
}

} // namespace db
